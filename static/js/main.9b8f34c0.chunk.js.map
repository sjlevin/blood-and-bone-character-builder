{"version":3,"sources":["enums.ts","TraitListItem.tsx","TraitList.tsx","AbilityListItem.tsx","AbilityList.tsx","BuffList.tsx","App.tsx","index.tsx"],"names":["TraitType","TraitListItem","trait","toggleSelected","type","checked","selected","onClick","name","TraitList","traits","sort","left","right","localeCompare","map","AbilityListItem","text","AbilityList","traitType","abilityName","replace","trim","filteredAbilities","texts","Buffs","className","ability","BuffList","buffs","Array","from","key","value","String","App","useState","AllTraits","setTraits","selectedTraits","filter","selectedBuffs","Map","forEach","buffArray","buff","set","attribute","modifier","get","Fragment","href","selectedTrait","updatedTraits","Benefits","DesperateActions","Reactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b8f34c0.chunk.js","sourcesContent":["export enum TraitType {\n    Benefits = \"benefits\",\n    Buffs = \"buffs\",\n    DesperateActions = \"desperateActions\",\n    Reactions = \"reactions\",\n}\n","import React from \"react\"\n\ninterface Props {\n    trait: Trait\n    toggleSelected: ToggleSelected\n}\n\nexport const TraitListItem: React.FC<Props> = ({ trait, toggleSelected }) => {\n    return (\n        <li>\n            <input\n                type=\"checkbox\"\n                checked={trait.selected}\n                onClick={() => {\n                    toggleSelected(trait)\n                }}\n            />\n            {trait.name}\n        </li>\n    )\n}\n","import React from \"react\"\nimport { TraitListItem } from \"./TraitListItem\"\n\ninterface Props {\n    name: string\n    traits: Array<Trait>\n    toggleSelected: ToggleSelected\n}\n\nexport const TraitList: React.FC<Props> = ({\n    name,\n    traits,\n    toggleSelected,\n}) => {\n    return (\n        <>\n            {name}:\n            <ul>\n                {traits.sort((left, right) => left.name.localeCompare(right.name)).map((trait) => (\n                    <TraitListItem\n                        trait={trait}\n                        toggleSelected={toggleSelected}\n                    />\n                ))}\n            </ul>\n        </>\n    )\n}\n","import React from \"react\"\n\ninterface Props {\n    name: string\n    text: string\n}\n\nexport const AbilityListItem: React.FC<Props> = ({ name, text }) => {\n    return (\n        <li>\n            <b>{name}</b>: {text}\n        </li>\n    )\n}\n","import React from \"react\"\nimport { TraitType } from \"./enums\"\nimport \"./AbilityList.css\"\nimport { AbilityListItem } from \"./AbilityListItem\"\n\ninterface Props {\n    traits: Array<Trait>\n    traitType: TraitType\n}\n\ninterface Ability {\n    name: string\n    texts: string[]\n}\n\nexport const AbilityList: React.FC<Props> = ({ traits, traitType }) => {\n    const abilityName = traitType.replace(/([A-Z])/g, \" $1\").trim()\n    const filteredAbilities = traits.map((trait) => {\n        let texts: Array<string>\n        if(traitType === TraitType.Buffs) {\n            texts = []\n        } else {\n            texts = trait[traitType] || []\n        }\n        const ability: Ability = {\n            name: trait.name,\n            texts: texts,\n        }\n        return ability\n    })\n\n    return (\n        <div className=\"outlined\">\n            <p className=\"capitalize\">{abilityName}</p>\n            {filteredAbilities.map((ability) =>\n                ability.texts.map((text) => (\n                    <AbilityListItem name={ability.name} text={text} />\n                ))\n            )}\n        </div>\n    )\n}\n","import React from \"react\"\nimport { AbilityListItem } from \"./AbilityListItem\"\n\ninterface Props {\n    buffs: Map<string, number>\n}\n\nexport const BuffList: React.FC<Props> = ({ buffs }) => {\n    return (\n        <div className=\"outlined\">\n            <p className=\"capitalize\">Buffs</p>\n            {\n                // Array.from(buffs, ([key, value]) => <AbilityListItem name={key} text={String(value)} />)\n                Array.from(buffs).sort((left, right) => left[0].localeCompare(right[0])).map(([key, value]) => <AbilityListItem name={key} text={String(value)} />)\n            }\n        </div>\n    )\n}\n","import React, { useState } from \"react\"\nimport AllTraits from \"./AllTraits.json\"\nimport { TraitList } from \"./TraitList\"\nimport { AbilityList } from \"./AbilityList\"\nimport { TraitType } from \"./enums\"\nimport { BuffList } from \"./BuffList\"\n\nfunction App() {\n    const [traits, setTraits] = useState<Array<Trait>>(AllTraits)\n    const selectedTraits = traits.filter((trait) => trait.selected)\n\n    const toggleSelected: ToggleSelected = (selectedTrait) => {\n        const updatedTraits = traits.map((trait) => {\n            if (trait === selectedTrait) {\n                return { ...trait, selected: !selectedTrait.selected }\n            }\n            return trait\n        })\n        setTraits(updatedTraits)\n    }\n\n    const selectedBuffs = new Map<string, number>()\n    selectedTraits.map(trait => trait.buffs).forEach((buffArray) => buffArray?.forEach((buff) => selectedBuffs.set(buff.attribute, buff.modifier + (selectedBuffs.get(buff.attribute) || 0))))\n\n    return (\n        <React.Fragment>\n            <p>\n                Work in Progress Character Builder for{\" \"}\n                <a href=\"https://www.arcana-games.com/bloodandbone\">\n                    Blood and Bone by Arcana Games\n                </a>\n            </p>\n            <TraitList\n                name={\"All Traits\"}\n                traits={traits}\n                toggleSelected={toggleSelected}\n            />\n            <BuffList\n                buffs={selectedBuffs}\n            />\n            <AbilityList\n                traits={selectedTraits}\n                traitType={TraitType.Benefits}\n            />\n            <AbilityList\n                traits={selectedTraits}\n                traitType={TraitType.DesperateActions}\n            />\n            <AbilityList\n                traits={selectedTraits}\n                traitType={TraitType.Reactions}\n            />\n            <a href=\"https://github.com/sjlevin/blood-and-bone-character-builder\">\n                Source Code\n            </a>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}