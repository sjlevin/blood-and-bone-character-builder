{"version":3,"sources":["enums.ts","TraitListItem.tsx","TraitList.tsx","AbilityListItem.tsx","AbilityList.tsx","App.tsx","index.tsx"],"names":["TraitType","TraitListItem","trait","toggleSelected","type","checked","selected","onClick","name","TraitList","traits","map","AbilityListItem","text","AbilityList","traitType","abilityName","replace","trim","filteredAbilities","texts","className","ability","App","useState","AllTraits","setTraits","selectedTraits","filter","Fragment","href","selectedTrait","updatedTraits","Benefits","DesperateActions","Reactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2pCAAYA,E,qDCOCC,EAAiC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,eACpD,OACI,4BACI,2BACIC,KAAK,WACLC,QAASH,EAAMI,SACfC,QAAS,WACLJ,EAAeD,MAGtBA,EAAMM,OCRNC,EAA6B,SAAC,GAIpC,IAHHD,EAGE,EAHFA,KACAE,EAEE,EAFFA,OACAP,EACE,EADFA,eAEA,OACI,oCACKK,EADL,IAEI,4BACKE,EAAOC,KAAI,SAACT,GAAD,OACR,kBAAC,EAAD,CACIA,MAAOA,EACPC,eAAgBA,UCd3BS,G,MAAmC,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,KAAMK,EAAW,EAAXA,KACrD,OACI,4BACI,2BAAIL,GADR,KACoBK,KCKfC,EAA+B,SAAC,GAA2B,IAAzBJ,EAAwB,EAAxBA,OAAQK,EAAgB,EAAhBA,UAC7CC,EAAcD,EAAUE,QAAQ,WAAY,OAAOC,OACnDC,EAAoBT,EAAOC,KAAI,SAACT,GAKlC,MAJyB,CACrBM,KAAMN,EAAMM,KACZY,MAAOlB,EAAMa,IAAc,OAKnC,OACI,yBAAKM,UAAU,YACX,uBAAGA,UAAU,cAAcL,GAC1BG,EAAkBR,KAAI,SAACW,GAAD,OACnBA,EAAQF,MAAMT,KAAI,SAACE,GAAD,OACd,kBAAC,EAAD,CAAiBL,KAAMc,EAAQd,KAAMK,KAAMA,a,SJ9BnDb,K,oBAAAA,E,oCAAAA,E,uBAAAA,M,KKoDGuB,MA9Cf,WAAgB,IAAD,EACiBC,mBAAuBC,GADxC,mBACJf,EADI,KACIgB,EADJ,KAELC,EAAiBjB,EAAOkB,QAAO,SAAC1B,GAAD,OAAWA,EAAMI,YAYtD,OACI,kBAAC,IAAMuB,SAAP,KACI,oEAC2C,IACvC,uBAAGC,KAAK,6CAAR,mCAIJ,kBAAC,EAAD,CACItB,KAAM,aACNE,OAAQA,EACRP,eArB2B,SAAC4B,GACpC,IAAMC,EAAgBtB,EAAOC,KAAI,SAACT,GAC9B,OAAIA,IAAU6B,EACH,2BAAK7B,GAAZ,IAAmBI,UAAWyB,EAAczB,WAEzCJ,KAEXwB,EAAUM,MAgBN,kBAAC,EAAD,CACItB,OAAQiB,EACRZ,UAAWf,EAAUiC,WAEzB,kBAAC,EAAD,CACIvB,OAAQiB,EACRZ,UAAWf,EAAUkC,mBAEzB,kBAAC,EAAD,CACIxB,OAAQiB,EACRZ,UAAWf,EAAUmC,YAEzB,uBAAGL,KAAK,+DAAR,iBCzCZM,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.12c62d11.chunk.js","sourcesContent":["export enum TraitType {\n    Benefits = \"benefits\",\n    DesperateActions = \"desperateActions\",\n    Reactions = \"reactions\",\n}\n","import React from \"react\"\n\ninterface Props {\n    trait: Trait\n    toggleSelected: ToggleSelected\n}\n\nexport const TraitListItem: React.FC<Props> = ({ trait, toggleSelected }) => {\n    return (\n        <li>\n            <input\n                type=\"checkbox\"\n                checked={trait.selected}\n                onClick={() => {\n                    toggleSelected(trait)\n                }}\n            />\n            {trait.name}\n        </li>\n    )\n}\n","import React from \"react\"\nimport { TraitListItem } from \"./TraitListItem\"\n\ninterface Props {\n    name: string\n    traits: Array<Trait>\n    toggleSelected: ToggleSelected\n}\n\nexport const TraitList: React.FC<Props> = ({\n    name,\n    traits,\n    toggleSelected,\n}) => {\n    return (\n        <>\n            {name}:\n            <ul>\n                {traits.map((trait) => (\n                    <TraitListItem\n                        trait={trait}\n                        toggleSelected={toggleSelected}\n                    />\n                ))}\n            </ul>\n        </>\n    )\n}\n","import React from \"react\"\n\ninterface Props {\n    name: string\n    text: string\n}\n\nexport const AbilityListItem: React.FC<Props> = ({ name, text }) => {\n    return (\n        <li>\n            <b>{name}</b>: {text}\n        </li>\n    )\n}\n","import React from \"react\"\nimport { TraitType } from \"./enums\"\nimport \"./AbilityList.css\"\nimport { AbilityListItem } from \"./AbilityListItem\"\n\ninterface Props {\n    traits: Array<Trait>\n    traitType: TraitType\n}\n\ninterface Ability {\n    name: string\n    texts: string[]\n}\n\nexport const AbilityList: React.FC<Props> = ({ traits, traitType }) => {\n    const abilityName = traitType.replace(/([A-Z])/g, \" $1\").trim()\n    const filteredAbilities = traits.map((trait) => {\n        const ability: Ability = {\n            name: trait.name,\n            texts: trait[traitType] || [],\n        }\n        return ability\n    })\n\n    return (\n        <div className=\"outlined\">\n            <p className=\"capitalize\">{abilityName}</p>\n            {filteredAbilities.map((ability) =>\n                ability.texts.map((text) => (\n                    <AbilityListItem name={ability.name} text={text} />\n                ))\n            )}\n        </div>\n    )\n}\n","import React, { useState } from \"react\"\nimport AllTraits from \"./AllTraits.json\"\nimport { TraitList } from \"./TraitList\"\nimport { AbilityList } from \"./AbilityList\"\nimport { TraitType } from \"./enums\"\n\nfunction App() {\n    const [traits, setTraits] = useState<Array<Trait>>(AllTraits)\n    const selectedTraits = traits.filter((trait) => trait.selected)\n\n    const toggleSelected: ToggleSelected = (selectedTrait) => {\n        const updatedTraits = traits.map((trait) => {\n            if (trait === selectedTrait) {\n                return { ...trait, selected: !selectedTrait.selected }\n            }\n            return trait\n        })\n        setTraits(updatedTraits)\n    }\n\n    return (\n        <React.Fragment>\n            <p>\n                Work in Progress Character Builder for{\" \"}\n                <a href=\"https://www.arcana-games.com/bloodandbone\">\n                    Blood and Bone by Arcana Games\n                </a>\n            </p>\n            <TraitList\n                name={\"All Traits\"}\n                traits={traits}\n                toggleSelected={toggleSelected}\n            />\n            <AbilityList\n                traits={selectedTraits}\n                traitType={TraitType.Benefits}\n            />\n            <AbilityList\n                traits={selectedTraits}\n                traitType={TraitType.DesperateActions}\n            />\n            <AbilityList\n                traits={selectedTraits}\n                traitType={TraitType.Reactions}\n            />\n            <a href=\"https://github.com/sjlevin/blood-and-bone-character-builder\">\n                Source Code\n            </a>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}